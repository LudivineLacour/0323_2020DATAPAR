<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>olist</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>269666288679377033</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8mb4</string>
			<key>contentFilterV2</key>
			<dict>
				<key>children</key>
				<array/>
				<key>filterClass</key>
				<string>groupNode</string>
				<key>isConjunction</key>
				<true/>
			</dict>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJX
			TlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAF
			gAdUdHlwZVRyb3dzXxAdU2VsZWN0aW9uRGV0YWlsVHlwZU5TSW5k
			ZXhTZXTSFwsYGVxOU1JhbmdlQ291bnQQAIAG0hscHR5aJGNsYXNz
			bmFtZVgkY2xhc3Nlc1pOU0luZGV4U2V0oh8gWk5TSW5kZXhTZXRY
			TlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVk
			QXJjaGl2ZXLRJidUZGF0YYABAAgAEQAaACMALQAyADcAQABGAE0A
			VQBgAGcAagBsAG4AcQBzAHUAdwB8AIEAoQCmALMAtQC3ALwAxwDQ
			ANsA3gDpAPIA9wEEAQcBGQEcASEAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<false/>
			<key>contentViewport</key>
			<string>{{18.5, 0}, {1052, 614}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>use shop;

## Lab | SQL
# 1. From the order_items table, find the price of the highest priced order item and lowest price order item.

select min(price), max(price)
from order_items;

# 2. From the order_items table, what is range of the shipping_limit_date of the orders?
select min(shipping_limit_date), max(shipping_limit_date)
from order_items;

# 3. From the customers table, find the 3 states with the greatest number of customers.
select customer_state
from customers
group by 1
order by count(distinct customer_unique_id) DESC
limit 3;

# 4. From the customers table, within the state with the greatest number of customers, find the 3 cities with the greatest number of customers.
select customer_city
from customers
where customer_state = 'SP'
group by 1
order by count(distinct customer_unique_id) DESC
limit 3;

# 5. From the closed_deals table, how many distinct business segments are there (not including null)?
select count(distinct business_segment)
from closed_deals
where business_segment is not null;

# 6. From the closed_deals table, sum the declared_monthly_revenue for duplicate row values in business_segment and find the 3 business segments with the highest declared monthly revenue (of those that declared revenue).
select business_segment
from closed_deals
where business_segment is not null
group by 1
order by sum(declared_monthly_revenue) desc
limit 3;

# 7. From the order_reviews table, find the total number of distinct review score values.
select count(distinct review_score)
from order_reviews;

# 8. In the order_reviews table, create a new column with a description that corresponds to each number category for each review score from 1 - 5.
select distinct review_score
from order_reviews
order by 1 asc;

# 9. From the order_reviews table, find the review score occurring most frequently and how many times it occurs.
select distinct review_score, count(review_id)
from order_reviews
group by 1
order by 2 desc
limit 1;</string>
			<key>table</key>
			<string>order_reviews</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string># 9. From the order_reviews table, find the review score occurring most frequently and how many times it occurs.
select distinct review_score, count(review_id)
from order_reviews
group by 1
order by 2 desc
limit 1</string>
		<string># 9. From the order_reviews table, find the review score occurring most frequently and how many times it occurs.
select distinct review_score, count(review_id)
from order_reviews
group by 1
order by 2 desc</string>
		<string># 9. From the order_reviews table, find the review score occurring most frequently and how many times it occurs.
select distinct review_score, count(review_id)
from order_reviews
group by 1
order by 1 asc</string>
		<string># 9. From the order_reviews table, find the review score occurring most frequently and how many times it occurs.
select distinct review_score, count(review_id)
from order_reviews
order by 1 asc</string>
		<string># 8. In the order_reviews table, create a new column with a description that corresponds to each number category for each review score from 1 - 5.
select distinct review_score
from order_reviews
order by 1 asc</string>
		<string># 8. In the order_reviews table, create a new column with a description that corresponds to each number category for each review score from 1 - 5.
select distinct review_score
from order_reviews
order by 1 desc</string>
		<string># 8. In the order_reviews table, create a new column with a description that corresponds to each number category for each review score from 1 - 5.
select distinct review_score
from order_reviews</string>
		<string># 7. From the order_reviews table, find the total number of distinct review score values.
select count(distinct review_score)
from order_reviews</string>
		<string># 7. From the order_reviews table, find the total number of distinct review score values.
select distinct review_score
from order_reviews</string>
		<string># 6. From the closed_deals table, sum the declared_monthly_revenue for duplicate row values in business_segment and find the 3 business segments with the highest declared monthly revenue (of those that declared revenue).
select business_segment
from closed_deals
where business_segment is not null
group by 1
order by sum(declared_monthly_revenue) desc
limit 3</string>
		<string># 6. From the closed_deals table, sum the declared_monthly_revenue for duplicate row values in business_segment and find the 3 business segments with the highest declared monthly revenue (of those that declared revenue).
select business_segment
from closed_deals
where business_segment is not null
group by 1
order by sum(declared_monthly_revenue) desc</string>
		<string># 6. From the closed_deals table, sum the declared_monthly_revenue for duplicate row values in business_segment and find the 3 business segments with the highest declared monthly revenue (of those that declared revenue).
select business_segment, sum(declared_monthly_revenue)
from closed_deals
where business_segment is not null
group by 1</string>
		<string># 6. From the closed_deals table, sum the declared_monthly_revenue for duplicate row values in business_segment and find the 3 business segments with the highest declared monthly revenue (of those that declared revenue).
select business_segment, sum(declared_monthly_revenue)
from closed_deals
where business_segment is not null</string>
		<string># 5. From the closed_deals table, how many distinct business segments are there (not including null)?
select count(distinct business_segment)
from closed_deals
where business_segment is not null</string>
		<string># 5. From the closed_deals table, how many distinct business segments are there (not including null)?
select count(distinct business_segment)
from closed_deals
where business_segment is not null
group by 1</string>
		<string># 5. From the closed_deals table, how many distinct business segments are there (not including null)?
select business_segment
from closed_deals
where business_segment is not null
group by 1</string>
		<string># 4. From the customers table, within the state with the greatest number of customers, find the 3 cities with the greatest number of customers.
select customer_city
from customers
where customer_state = 'SP'
group by 1
order by count(distinct customer_unique_id) DESC
limit 3</string>
		<string># 4. From the customers table, within the state with the greatest number of customers, find the 3 cities with the greatest number of customers.
select customer_city
from customers
where customer_state = 'SP'
group by 1
order by count(distinct customer_unique_id) DESC</string>
		<string># 4. From the customers table, within the state with the greatest number of customers, find the 3 cities with the greatest number of customers.
select customer_city
from customers
where customer_state = 'SP'
group by 1,2
order by count(distinct customer_unique_id) DESC</string>
		<string># 4. From the customers table, within the state with the greatest number of customers, find the 3 cities with the greatest number of customers.
select customer_state, customer_city
from customers
where customer_state = 'SP'
group by 1,2
order by count(distinct customer_unique_id) DESC</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>8.0.19</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
